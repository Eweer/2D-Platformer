// tag::code[]
struct xml_string_writer : pugi::xml_writer
{
	std::string result;

	virtual void write(const void *data, size_t size)
	{
		result.append(static_cast<const char *>(data), size);
	}
};
// end::code[]

std::string node_to_string(pugi::xml_node node)
{
	xml_string_writer writer;
	node.print(writer);

	return writer.result;
}

bool AppendXMLString(pugi::xml_node target, const std::string& srcString)
{
  // parse XML string as document
  pugi::xml_document doc;
  if (!doc.load_buffer(srcString.c_str(), srcString.length()))
    return false;

  for (pugi::xml_node child = doc.first_child(); child; child = child.next_sibling())
    target.append_copy(child);
  return true;
}


/*!
    Return requested XmlNode value

    @param name of the XmlNode
    @param filter by given attribute(s) -> name:value   
    @return value of XmlNode or empty string in case of error
*/
std::string XmlParser::GetNodeValue(std::string node, std::vector<std::pair<std::string,std::string>> &attributes /* = std::vector<std::pair<std::string,std::string>>() */)
{   
    try
    {
        std::string nodeValue = "";     

        if(attributes.size() != 0) nodeValue = m_xmlDoc.select_node(CreateXPath(node, attributes).c_str()).node().child_value();            
        else nodeValue = m_xmlDoc.select_node(("//" + node).c_str()).node().child_value();          

        return nodeValue;
    }
    catch(std::exception exp) 
    {           
        return ""; 
    }
}


/*!
    Create XPath from node name and attributes

    @param XML node name
    @param vector of attribute name:value pairs
    @return XPath string
*/
std::string XmlParser::CreateXPath(std::string node, std::vector<std::pair<std::string,std::string>> &attributes)
{
    try
    {       
        // create XPath
        std::string xpath = node + "[";
        for(auto it=attributes.begin(); it!=attributes.end(); it++)
            xpath += "@" + it->first + "='" + it->second + "' and ";
        xpath.replace(xpath.length()-5, 5, "]");        

        return xpath;
    }
    catch(std::exception exp)
    {       
        return "";
    }
}